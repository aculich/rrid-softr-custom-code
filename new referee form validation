//OLD VERSION
<script>
window.addEventListener("load", function () {
  setTimeout(async function () {
    console.log("Page loaded, initializing script...");

    function getUrlParam(name) {
      const url = new URL(window.location.href);
      let param;
      for (var key of url.searchParams.keys()) {
        if (key.toLowerCase() === name.toLowerCase()) {
          param = url.searchParams.get(name);
          break;
        }
      }

      if (!param && name.toLowerCase() === 'recordid') {
        param = getRecordIdFromPath();
      }
      return param;
    }

    function getRecordIdFromPath() {
      let pathName = window.location.pathname;
      if (pathName.indexOf('/r/rec') !== -1) {
        pathName = pathName.substr(pathName.indexOf('/r/rec') + 3);
        if (pathName.indexOf("/") !== -1) {
          pathName = pathName.substring(0, pathName.indexOf('/'))
        }
        return pathName;
      }
      return undefined;
    }

    async function fetchWithRetry(url, options, retries = 5, delay = 1000) {
      try {
        const response = await fetch(url, options);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
      } catch (error) {
        if (retries > 0) {
          console.warn(`Retrying... (${retries} attempts left)`);
          await new Promise(resolve => setTimeout(resolve, delay));
          return fetchWithRetry(url, options, retries - 1, delay * 2);
        } else {
          throw error;
        }
      }
    }

    async function fetchPreprintId(recordId) {
      const apiUrl = `https://api.airtable.com/v0/appAYosfmfSuHWiBT/tblzqocWVmZV6fwWX/${recordId}`;
      const apiKey = 'patbdOU2kaEyFmjSo.807eb700fe139fe032e80e34e0e10b7bc301c95efc3e79006fe3acd6a818268d';

      try {
        const response = await fetch(apiUrl, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${apiKey}`
          }
        });

        if (response.ok) {
          const data = await response.json();
          const preprintId = data.fields['Preprint ID'];
          console.log('Fetched Preprint ID:', preprintId);
          return preprintId;
        } else {
          const errorData = await response.json();
          console.error('Failed to fetch Preprint ID', response.status, response.statusText, errorData);
          return null;
        }
      } catch (error) {
        console.error('Error fetching Preprint ID', error);
        return null;
      }
    }

    const recordId = getUrlParam('recordId');
    console.log("Record ID from URL:", recordId);

    if (!recordId) {
      console.error("Record ID not found. Please ensure the URL has a valid recordId parameter.");
      return;
    }

    //const submitButton = document.querySelector('button.nw87ex7.nw87ex8[data-testid="button"]');
    
    //const submitButton = document.querySelector('button.e9e5011_nw87ex8[data-testid="button"]');
    const submitButton = document.querySelector('button[data-testid="button"][data-loading="false"][data-disabled="false"]');
    
    const reviewerEmailInput = document.querySelector('input[name="6a000ec7-f4fd-41fc-8971-f039d287af6c"]');
    const validationMessage = document.getElementById("validation-message");
    const backupCheckbox = document.querySelector('input[type="checkbox"][name="94fbd810-f84f-4564-bb30-a80287811fb4"]');
    
    console.log("Elements selected:", { submitButton, reviewerEmailInput, validationMessage, backupCheckbox });

    if (submitButton) {
      submitButton.style.pointerEvents = "none";
      submitButton.style.opacity = "0.5";
      console.log("Next button made unclickable");
    } else {
      console.log("Next button not found");
    }

    const apiKey = 'patbdOU2kaEyFmjSo.807eb700fe139fe032e80e34e0e10b7bc301c95efc3e79006fe3acd6a818268d';
    const baseID = 'appAYosfmfSuHWiBT';

    let recentReviewers = [];
    let proposedAuthors = [];

    try {
      recentReviewers = await fetchRecentReviewers('tbl6Dx2qqCxGvv2u0');
      console.log("Fetched recent reviewers:", recentReviewers);
    } catch (error) {
      console.error("Error fetching recent reviewers:", error);
    }


    const preprintId = await fetchPreprintId(recordId);
    if (preprintId) {
      try {
        proposedAuthors = await fetchProposedAuthors('tblHRiK0758oaO4jI', "First Name (Proposed Reviewer)", "Last Name (Proposed Reviewer)", preprintId);
        console.log("Fetched proposed authors:", proposedAuthors);
      } catch (error) {
        console.error("Error fetching proposed authors:", error);
      }
    } else {
      console.error("Preprint ID not found, cannot fetch proposed authors.");
    }

    if (reviewerEmailInput) {
      reviewerEmailInput.addEventListener("input", validateAuthorInput);
    }

    if (backupCheckbox) {
      backupCheckbox.addEventListener("change", validateAuthorInput);
    }

    async function validateAuthorInput() {
      const reviewerEmail = reviewerEmailInput.value.trim().toLowerCase();
      const emailDomain = reviewerEmail.split('@')[1];
      const isBackupChecked = backupCheckbox ? backupCheckbox.checked : false;

      console.log("Validating reviewer email:", reviewerEmail);
      console.log("Email domain:", emailDomain);
      console.log("Backup checkbox checked:", isBackupChecked);

      let isValid = true;
      let errorMessage = "";
      
      // List of keywords to exclude from duplicate domain check
      const excludedDomainsKeywords = ["gmail", "yahoo", "hotmail", "aol"];
    
      // Function to check if email domain contains any of the excluded keywords
      const isExcludedDomain = excludedDomainsKeywords.some(keyword => emailDomain.includes(keyword));

    
      if (reviewerEmail === "" || !validateEmail(reviewerEmail)) {
        isValid = false;
      } else {
         if (recentReviewers.some(reviewer => reviewer.email === reviewerEmail)) {
          errorMessage = "The reviewer is a recent reviewer. Please reject this suggested reviewer and in the justification write \"Recent Reviewer\"";
          isValid = false;
        } else if (proposedAuthors.some(author => author.email === reviewerEmail)) {
          errorMessage = "The reviewer has already been proposed.";
          isValid = false;
        }else if (!isExcludedDomain) { // Check if it's not an excluded domain
          const matchingProposedAuthors = proposedAuthors.filter(author => author.email && author.email.split('@')[1] === emailDomain);
          if (matchingProposedAuthors.length > 0 && !isBackupChecked) {
            const matchingNames = matchingProposedAuthors.map(author => `${author.firstName} ${author.lastName}`).join(', ');
            errorMessage = `The reviewer email domain "${emailDomain}" matches proposed reviewers: ${matchingNames}. Please check 'Invite Backup' to proceed.`;
            isValid = false;
          } else {
            errorMessage = "";
          }
        } else {
          errorMessage = "";
        }
      }

      validationMessage.innerText = errorMessage;
      validationMessage.style.color = "#de350b";
      validationMessage.style.display = isValid ? "none" : "block";

      if (submitButton) {
        if (isValid) {
          submitButton.style.pointerEvents = "auto";
          submitButton.style.opacity = "1";
          console.log("Next button made clickable");
        } else {
          submitButton.style.pointerEvents = "none";
          submitButton.style.opacity = "0.5";
          console.log("Next button made unclickable again");
        }
      }
    }

    function validateEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(String(email).toLowerCase());
    }

async function fetchRecentReviewers(tableID) {
  const url = `https://api.airtable.com/v0/${baseID}/${tableID}`;
  let allRecords = [];
  let offset = null;

  try {
    do {
      let requestUrl = offset ? `${url}?offset=${offset}` : url;

      const data = await fetchWithRetry(requestUrl, {
        headers: {
          Authorization: `Bearer ${apiKey}`
        }
      });

      const records = data.records;

      records.forEach(record => {
        const email = record.fields['Email'] ? record.fields['Email'].toLowerCase() : null;
        const firstName = record.fields['Reviewer First Name'] ? record.fields['Reviewer First Name'].toLowerCase() : null;
        const lastName = record.fields['Reviewer Last Name'] ? record.fields['Reviewer Last Name'].toLowerCase() : null;

        allRecords.push({
          email,
          firstName,
          lastName
        });
      });

      // Check if there's more data (pagination)
      offset = data.offset;

    } while (offset);

    return allRecords;

  } catch (error) {
    console.error("Error fetching recent reviewers:", error);
  }
}









   


    async function fetchProposedAuthors(tableID, firstNameField, lastNameField, preprintId) {
      const url = `https://api.airtable.com/v0/${baseID}/${tableID}?filterByFormula={Preprint ID (pulled)}='${preprintId}'`;
      try {
        const data = await fetchWithRetry(url, {
          headers: {
            Authorization: `Bearer ${apiKey}`
          }
        });
        console.log("Fetched proposed authors:", data);

        // Check if the response has records and log detailed information
        if (data.records && data.records.length > 0) {
          return data.records.map(record => {
            const firstName = record.fields[firstNameField];
            const lastName = record.fields[lastNameField];
            const email = record.fields['Reviewer Email']; // Corrected field name
            console.log(`Proposed author record ${record.id} - First name: ${firstName}, Last name: ${lastName}, Email: ${email}`);
            return { firstName: firstName ? firstName.toLowerCase() : undefined, lastName: lastName ? lastName.toLowerCase() : undefined, email: email ? email.toLowerCase() : undefined };
          });
        } else {
          console.log("No records found for proposed authors.");
          return [];
        }
      } catch (error) {
        console.error("Error fetching proposed authors:", error);
        return [];
      }
    }

  }, 100);
});
</script>